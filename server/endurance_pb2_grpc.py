# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import endurance_pb2 as endurance__pb2


class EnduranceServiceStub(object):
    """SERVICE

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.predict = channel.unary_unary(
                '/endurance.EnduranceService/predict',
                request_serializer=endurance__pb2.PredictRequest.SerializeToString,
                response_deserializer=endurance__pb2.PredictResponse.FromString,
                )
        self.add_model = channel.unary_unary(
                '/endurance.EnduranceService/add_model',
                request_serializer=endurance__pb2.AddModelRequest.SerializeToString,
                response_deserializer=endurance__pb2.DefaultResponse.FromString,
                )
        self.load_model = channel.unary_unary(
                '/endurance.EnduranceService/load_model',
                request_serializer=endurance__pb2.LoadModelRequest.SerializeToString,
                response_deserializer=endurance__pb2.DefaultResponse.FromString,
                )
        self.delete_model = channel.unary_unary(
                '/endurance.EnduranceService/delete_model',
                request_serializer=endurance__pb2.DefaultRequest.SerializeToString,
                response_deserializer=endurance__pb2.DefaultResponse.FromString,
                )
        self.list_models = channel.unary_unary(
                '/endurance.EnduranceService/list_models',
                request_serializer=endurance__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=endurance__pb2.ListModelsResponse.FromString,
                )
        self.toggle_logger = channel.unary_unary(
                '/endurance.EnduranceService/toggle_logger',
                request_serializer=endurance__pb2.ToggleRequest.SerializeToString,
                response_deserializer=endurance__pb2.DefaultResponse.FromString,
                )


class EnduranceServiceServicer(object):
    """SERVICE

    """

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_models(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def toggle_logger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EnduranceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=endurance__pb2.PredictRequest.FromString,
                    response_serializer=endurance__pb2.PredictResponse.SerializeToString,
            ),
            'add_model': grpc.unary_unary_rpc_method_handler(
                    servicer.add_model,
                    request_deserializer=endurance__pb2.AddModelRequest.FromString,
                    response_serializer=endurance__pb2.DefaultResponse.SerializeToString,
            ),
            'load_model': grpc.unary_unary_rpc_method_handler(
                    servicer.load_model,
                    request_deserializer=endurance__pb2.LoadModelRequest.FromString,
                    response_serializer=endurance__pb2.DefaultResponse.SerializeToString,
            ),
            'delete_model': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_model,
                    request_deserializer=endurance__pb2.DefaultRequest.FromString,
                    response_serializer=endurance__pb2.DefaultResponse.SerializeToString,
            ),
            'list_models': grpc.unary_unary_rpc_method_handler(
                    servicer.list_models,
                    request_deserializer=endurance__pb2.ListModelsRequest.FromString,
                    response_serializer=endurance__pb2.ListModelsResponse.SerializeToString,
            ),
            'toggle_logger': grpc.unary_unary_rpc_method_handler(
                    servicer.toggle_logger,
                    request_deserializer=endurance__pb2.ToggleRequest.FromString,
                    response_serializer=endurance__pb2.DefaultResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'endurance.EnduranceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EnduranceService(object):
    """SERVICE

    """

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/predict',
            endurance__pb2.PredictRequest.SerializeToString,
            endurance__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/add_model',
            endurance__pb2.AddModelRequest.SerializeToString,
            endurance__pb2.DefaultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/load_model',
            endurance__pb2.LoadModelRequest.SerializeToString,
            endurance__pb2.DefaultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/delete_model',
            endurance__pb2.DefaultRequest.SerializeToString,
            endurance__pb2.DefaultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_models(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/list_models',
            endurance__pb2.ListModelsRequest.SerializeToString,
            endurance__pb2.ListModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def toggle_logger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/endurance.EnduranceService/toggle_logger',
            endurance__pb2.ToggleRequest.SerializeToString,
            endurance__pb2.DefaultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
